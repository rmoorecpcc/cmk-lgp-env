#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# vim:sta:si:sw=4:sts=4:et:
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# The Check_MK official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Check has been developed using a Emerson Network Power
# Manufacturer			Liebert Corporation
# Device Model			Liebert HIMOD
# Device Firmware Version	PAL 1.04.029.STD
# Agent Type			IntelliSlot Web Card
# Agent App Firmware Version	3.210.0
# Agent App Firmware Label	IS-WEBLBDS_HID7_3.210.0_046175
# Agent Boot Firmware Version	3.210.0
# Agent Boot Firmware Label	IS-WEBLBDS_HID7_3.210.0_046175
# Agent Hardware ID		7
#
# +------------------------------------------------------------------+
# | This file has been contributed by:                               |
# |                                                                  |
# | Václav Ovsík <vaclav.ovsik@gmail.com>             Copyright 2012 |
# +------------------------------------------------------------------+

# Example info:
#  [['1', '.1.3.6.1.4.1.476.1.42.3.4.1.1.1', '23'],
#   ['2', '.1.3.6.1.4.1.476.1.42.3.4.1.1.3', '21'],
#   ['3', '.1.3.6.1.4.1.476.1.42.3.4.1.1.2', '23']]


lgp_env_temp_oid2desc = {
    '.1.3.6.1.4.1.476.1.42.3.4.1.1.1': 'Control',	    # LIEBERT-GP-ENVIRONMENTAL-MIB::lgpEnvControlTemperature
    '.1.3.6.1.4.1.476.1.42.3.4.1.1.3': 'Supply Air',    # LIEBERT-GP-ENVIRONMENTAL-MIB::lgpEnvSupplyAirTemperature
    '.1.3.6.1.4.1.476.1.42.3.4.1.1.2': 'Return Air',    # LIEBERT-GP-ENVIRONMENTAL-MIB::lgpEnvReturnAirTemperature
}

lgp_env_temp_desc2oid = dict(map(reversed, lgp_env_temp_oid2desc.items()))


def inventory_lgp_env_temp(info):
    if len(info) == 0:
        return
    inv = []
    for t in info:
        if t[1] in lgp_env_temp_oid2desc:
            inv.append((lgp_env_temp_oid2desc[t[1]], {}))
    return inv

def check_lgp_env_temp(item, params, info):
    oid = lgp_env_temp_desc2oid.get(item)
    if not oid:
        return (3, 'Item can not be found in SNMP output.')
    name = 'temp_' + item.lower().replace(' ', '_')
    for t in info:
        if t[1] == oid:
            return check_lgp_env_chk_levels_final(name, saveint(t[2]), params)


check_info['lgp_env_temp'] = (check_lgp_env_temp,
        'Temp %s', 1, inventory_lgp_env_temp)
check_includes['lgp_env_temp'] = [ 'lgp_env.include' ]
check_default_levels['lgp_env_temp'] = 'lgp_env_default_levels'

snmp_info['lgp_env_temp'] = ('.1.3.6.1.4.1.476.1.42.3.4.1.3.3.1', [
	'1', # LIEBERT-GP-ENVIRONMENTAL-MIB::lgpEnvTemperatureIdDegC
	'2', # LIEBERT-GP-ENVIRONMENTAL-MIB::lgpEnvTemperatureDescrDegC
	'3', # LIEBERT-GP-ENVIRONMENTAL-MIB::lgpEnvTemperatureMeasurementDegC
    ])

snmp_scan_functions['lgp_env_temp'] = lambda oid: \
        oid('.1.3.6.1.2.1.1.2.0').startswith('.1.3.6.1.4.1.476.1.42')
